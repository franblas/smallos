#ifndef GDT_H#define GDT_H/** * http://wiki.osdev.org/Global_Descriptor_Table * entry = segment */#include "common.h"/* GDT structures */typedef struct {  u16 size;     // Size of the gdt table  u32 address;  // Address of the first gdt entry} __attribute__((packed)) gdt_table;typedef struct {  u16 limit;    // Lower 16 bits of the limit  u16 base_low; // Lower 16 bits of the base  u8 base_mid;  // Next 8 bits of the base  u8 access;    // Access flags  u8 others;    // Other flags (4 bits + 4 bits of limit)  u8 base_high; // Last 8 bits of the base} __attribute__((packed)) gdt_entry;/** gdt_load_and_set: * Load and set the global descriptor table (GDT). * Called from 'gdt_asm' assembly code. * * @param (u32) Address of the GDT table */void gdt_load_and_set(u32);/** gdt_init: * Initialize the GDT table and entries. * */void gdt_init();#endif /* GDT_H */